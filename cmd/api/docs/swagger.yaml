definitions:
  req.AdminLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  req.Category:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  req.DoctorLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  req.DoctorRegistration:
    properties:
      about:
        type: string
      email:
        type: string
      license_number:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  req.UserLogin:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  req.UserRegister:
    properties:
      age:
        type: integer
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      user_name:
        type: string
    type: object
  res.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      stastus_code:
        type: integer
    type: object
info:
  contact:
    email: abhinandarun369@gmail.com
    name: For API Support
  description: 'Backend API built with Golang using Clean Code architecture. \nGithub:
    [https://github.com/kannan112/easy-health].'
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  title: E-commerce Application Backend API
paths:
  /admin/categories:
    delete:
      description: Delete a category by ID
      operationId: delete-category
      parameters:
      - description: Category ID
        format: int64
        in: query
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.Response'
      summary: delete categories
      tags:
      - Categories
    get:
      description: List categories
      operationId: list-categories
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.Response'
      summary: list categories
      tags:
      - Categories
    post:
      consumes:
      - application/json
      description: Create a new category based on the provided data
      parameters:
      - description: Category data to create
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/req.Category'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: Unauthorized
          schema:
            type: string
        "422":
          description: Unprocessable Entity
          schema:
            $ref: '#/definitions/res.Response'
      summary: create a new category
      tags:
      - Categories
  /admin/categories/{id}:
    put:
      consumes:
      - application/json
      description: Update a category with new name and description by providing ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: integer
      - description: New name of the category
        in: query
        name: name
        required: true
        type: string
      - description: New description of the category
        in: query
        name: description
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated category details
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Please login
          schema:
            $ref: '#/definitions/res.Response'
        "404":
          description: Failed to get ID" or "Failed to update category
          schema:
            $ref: '#/definitions/res.Response'
      summary: Update a category by ID
      tags:
      - Categories
  /admin/create:
    post:
      consumes:
      - application/json
      description: admin creation
      operationId: AdminSignup
      parameters:
      - description: New Admin details
        in: body
        name: admin
        required: true
        schema:
          $ref: '#/definitions/req.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Create a new admin from admin panel
      tags:
      - Admin
  /admin/doctor/approve/{id}:
    post:
      description: Approve a doctor by ID
      operationId: approve-doctor
      parameters:
      - description: Doctor ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.Response'
      summary: Approve a Doctor
      tags:
      - Admin Dashboard
  /admin/doctor/not-approved:
    get:
      description: Get a list of doctors that are not yet approved
      operationId: list-doctors-not-approved
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/res.Response'
      summary: List Doctors Not Approved
      tags:
      - Admin Dashboard
  /admin/login:
    post:
      consumes:
      - application/json
      description: Logs in an admin user
      parameters:
      - description: Admin login data
        in: body
        name: adminLogin
        required: true
        schema:
          $ref: '#/definitions/req.AdminLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
      summary: Admin login
      tags:
      - Admin
  /admin/logout:
    get:
      description: Logs out an admin user.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/res.Response'
      security:
      - BearerTokenAuth: []
      summary: Admin Logout
      tags:
      - Admin
  /doctor/{categoryid}/registration:
    post:
      consumes:
      - application/json
      description: Register a doctor.
      parameters:
      - description: Category ID
        in: path
        name: categoryid
        required: true
        type: integer
      - description: Doctor Registration Data
        in: body
        name: registrationData
        required: true
        schema:
          $ref: '#/definitions/req.DoctorRegistration'
      produces:
      - application/json
      responses:
        "202":
          description: Registration accepted
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad request or registration failure
          schema:
            $ref: '#/definitions/res.Response'
      summary: Doctor Registration
      tags:
      - Doctor Authentication
  /doctor/categories:
    get:
      description: List available categories for doctors.
      produces:
      - application/json
      responses:
        "200":
          description: Categories listed successfully
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Failed to list categories
          schema:
            $ref: '#/definitions/res.Response'
      summary: List Doctor Categories
      tags:
      - Doctor
  /doctor/login:
    post:
      consumes:
      - application/json
      description: Logs in a doctor.
      parameters:
      - description: Doctor Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/req.DoctorLogin'
      produces:
      - application/json
      responses:
        "202":
          description: Doctor login successful
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad request or login failure
          schema:
            $ref: '#/definitions/res.Response'
      summary: Doctor Login
      tags:
      - Doctor Authentication
  /doctor/profile:
    get:
      description: Get the profile of a doctor.
      parameters:
      - description: Bearer Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Doctor profile retrieved successfully
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad request or profile retrieval failure
          schema:
            $ref: '#/definitions/res.Response'
      summary: Get Doctor Profile
      tags:
      - Doctor
  /user/login:
    post:
      consumes:
      - application/json
      description: Logs in a user.
      parameters:
      - description: User Login Request
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/req.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad request or login failure
          schema:
            $ref: '#/definitions/res.Response'
      summary: User Login
      tags:
      - User Authentication
  /user/logout:
    get:
      description: Logs out a user.
      produces:
      - application/json
      responses:
        "200":
          description: Logged out successfully
          schema:
            $ref: '#/definitions/res.Response'
      summary: Logout user from the app
      tags:
      - User Authentication
  /user/signup:
    post:
      consumes:
      - application/json
      description: Register a new user account with the provided details.
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/req.UserRegister'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
          schema:
            $ref: '#/definitions/res.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.Response'
      summary: Register a new user account
      tags:
      - User Authentication
securityDefinitions:
  BearerAuth:
    description: 'Add prefix of Bearer before  token Ex: "Bearer token"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
